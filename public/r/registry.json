{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "utilcn",
  "homepage": "https://utilcn.dev",
  "items": [
    {
      "name": "capitalize-all",
      "type": "registry:lib",
      "title": "Capitalize All",
      "description": "Capitalize the first letter of every word in a string.",
      "files": [
        {
          "path": "registry/default/strings/capitalize-all.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "capitalize",
      "type": "registry:lib",
      "title": "Capitalize",
      "description": "Capitalize the first letter of a string.",
      "files": [
        {
          "path": "registry/default/strings/capitalize.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "repeat-pad",
      "type": "registry:lib",
      "title": "Repeat Pad",
      "description": "Repeat a string until it reaches the desired length.",
      "files": [
        {
          "path": "registry/default/strings/repeat-pad.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "reverse-string",
      "type": "registry:lib",
      "title": "Reverse String",
      "description": "Reverse a string.",
      "files": [
        {
          "path": "registry/default/strings/reverse-string.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "to-camel-case",
      "type": "registry:lib",
      "title": "To Camel Case",
      "description": "Convert a string to camelCase.",
      "files": [
        {
          "path": "registry/default/strings/to-camel-case.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "to-kebab-case",
      "type": "registry:lib",
      "title": "To Kebab Case",
      "description": "Convert a string to kebabCase.",
      "files": [
        {
          "path": "registry/default/strings/to-kebab-case.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "to-pascal-case",
      "type": "registry:lib",
      "title": "To Pascal Case",
      "description": "Convert a string to PascalCase.",
      "files": [
        {
          "path": "registry/default/strings/to-pascal-case.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "to-snake-case",
      "type": "registry:lib",
      "title": "To Snake Case",
      "description": "Convert a string to snake_case.",
      "files": [
        {
          "path": "registry/default/strings/to-snake-case.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "truncate-string",
      "type": "registry:lib",
      "title": "Truncate String",
      "description": "Truncate a string to a given length.",
      "files": [
        {
          "path": "registry/default/strings/truncate-string.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "generate-presigned-upload-url",
      "type": "registry:lib",
      "title": "Generate Presigned Upload URL",
      "description": "Generate a presigned upload URL for a file.",
      "docs": "Remember to configure CORS settings in your S3 bucket or compatible storage provider to allow uploads from your application's domain. This is required for the presigned URL uploads to work correctly.",
      "envVars": {
        "S3_ACCESS_KEY": "<access key for S3 bucket>",
        "S3_SECRET_KEY": "<secret key for S3 bucket authentication>",
        "S3_REGION": "<AWS region for S3 bucket>",
        "S3_ENDPOINT": "<S3 bucket endpoint URL>",
        "S3_BUCKET_NAME": "<name of the S3 bucket>",
        "S3_PUBLIC_URL": "<public URL for accessing uploaded files>"
      },
      "dependencies": [
        "@aws-sdk/client-s3",
        "@aws-sdk/s3-request-presigner"
      ],
      "files": [
        {
          "path": "registry/default/files/generate-presigned-upload-url.ts",
          "type": "registry:lib"
        }
      ]
    },
    {
      "name": "upload-file",
      "type": "registry:component",
      "title": "Upload A File To Storage",
      "description": "Upload a file to a storage provider using a presigned upload URL.",
      "docs": "This component pairs nicely with the `generate-presigned-upload-url` item from this registry to generate a presigned upload URL for a file.",
      "dependencies": [
        "@tanstack/react-query"
      ],
      "files": [
        {
          "path": "registry/default/files/upload-file.tsx",
          "type": "registry:component"
        },
        {
          "path": "registry/default/files/use-upload-file.ts",
          "type": "registry:hook"
        }
      ]
    }
  ]
}
